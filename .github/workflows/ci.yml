# # name: Run Backend Tests

# # on:
# #   push:
# #     branches: [main]
# #   pull_request:
# #     branches: [main]

# # jobs:
# #   test:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: 📥 Checkout repository
# #         uses: actions/checkout@v3

# #       - name: 🟨 Setup Node.js
# #         uses: actions/setup-node@v3
# #         with:
# #           node-version: 20

# #       - name: 📦 Install dependencies
# #         run: npm install
# #         working-directory: ./backend

# #       - name: 🧪 Run tests
# #         run: npm test -- users/
# #         working-directory: ./backend
# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   backend-tests:
#     name: 🔍 Backend Tests
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_DB: trackpro
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: password
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd="pg_isready"
#           --health-interval=10s
#           --health-timeout=5s
#           --health-retries=5

#     steps:
#       - name: ⬇️ Checkout code
#         uses: actions/checkout@v4

#       - name: 🟨 Use Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18

#       - name: 📦 Install dependencies
#         working-directory: ./backend
#         run: npm install

#       - name: ⚙️ Wait for PostgreSQL to be ready
#         run: |
#           until pg_isready -h localhost -p 5432 -U postgres; do
#             echo "Waiting for postgres..."
#             sleep 2
#           done

#       - name: 🧪 Run Unit & Functional Tests
#         working-directory: ./backend
#         env:
#           DATABASE_URL: postgres://postgres:password@localhost:5432/trackpro
#         run: npm run test -- users/

#   docker-build:
#     name: 🐳 Build Docker Images
#     runs-on: ubuntu-latest
#     needs: backend-tests

#     steps:
#       - name: ⬇️ Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: 🧱 Build all services (backend, frontend, db)
#         run: docker compose build

# name: 🔁 CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build-test-deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: 📂 Checkout code
#       uses: actions/checkout@v3

#     - name: 🧰 Install Docker Compose CLI plugin
#       run: |
#         sudo mkdir -p /usr/local/lib/docker/cli-plugins
#         curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o docker-compose
#         chmod +x docker-compose
#         sudo mv docker-compose /usr/local/lib/docker/cli-plugins/docker-compose
#         docker compose version

#     - name: 🟨 Setup Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '18'

#     - name: 📦 Install backend dependencies
#       run: |
#         cd backend
#         npm ci

#     - name: 🧪 Run unit tests
#       run: |
#         cd backend
#         npm run test -- users/

#     - name: 🐳 Build Docker containers
#       run: docker compose build

#     - name: 🚀 Start containers
#       run: docker compose up -d

#     - name: 🛠️ Check backend is running
#       run: |
#         sleep 10
#         curl --fail http://localhost:3000 || exit 1

name: CI/CD Docker Compose - TrackPro

on:
  push:
    branches: [main]

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: trackpro
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/trackpro

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: 🧪 Run backend tests
        run: |
          cd backend
          npm run test -- users/

      - name: 🐳 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build backend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/trackpro-backend:latest ./backend

      - name: 🏗️ Build frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/trackpro-frontend:latest ./frontend

      - name: 🚀 Push backend image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/trackpro-backend:latest

      - name: 🚀 Push frontend image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/trackpro-frontend:latest
